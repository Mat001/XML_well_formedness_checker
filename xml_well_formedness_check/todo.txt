TO DO:
    FIX functions:

    - IMPORTANT:

    - BUG - paired elements close properly
      <note>
        <a1 id="123"><ddd></ddd>
            <a1>
            <b1></as><as>   - DOESN'T SEE THIS WRONG ORDER
            </b1>
            </b1></b1></b1><sss></sss></b1>  - DOESN'T SEE SEVERAL </b1> tags - NOW FIXED
        </a1></a1><mmm></mmm>
      </note>


    - HOW TO ADD LINE NUMBER TO WARNINGS for functions 'no of tags not even', 'tags don't match'?
        - first option: function even tags has exception that allows further funcion checks until the point
        where linenumber can be pinpointed.
        The problem with this is that get_all_tags_in_order() requires even and matching brackets.
        So either fix get_all_tags_in_order so it doesn't have to rely on even and matching brackets or
        fix functions even brackets, matching brackets to show line numbers.
        - second: apply errorLog class and see if you can use line numbers there
        COMMENT: TWO OPENING or CLOSING BRACKETS CAN't BE ONE RIGHT AFTER THE OTHER?

    - BUG (SEVERE): not recognizing nesting
    Doesn't pick up two consecutive <img><img> tags or </img></img>.
    Seems the bug comes up when even number of tags but have opening or both have closing tag.
    Snippet from within the root element:

    </img><img>         <--- DOESNT PICK UP !!!!!!
    <from>category1 | category2 | category3</from>
    <a1></img></img>    <---- DOESNT PICK UP !!!!!
        <img>
            <a2>
                <from >
                    <from>uuu</from>
                </from>
            </a2>
        <img>       <----- DOESNT PICK UP MISSING CLOSING TAG
    </a1>
    Does nesting function work only for element names, but doesn't check if tag is opening of closing?
    Make sure that there is a check that checks whether </img><img> is in incorrect order (while checking
    for nesting or as separete check) - should function paired_elements_are_closed_properly_and_names_match do that ()?

    - BUG: no_restricted_characters_in_content function duplicates error message if same data content with
    same invalid character exists. For example:
     <firstname b="12">u&u</firstname> on line 10 and
     <from>u&u</from> on line 32
     As solution I could use return False at the end of if statement to show one error message at the time

    - program works only when functions in a long if statement. If no if statement, then functions return duplicate results
    because same checks are used in different functions. Benefit is that all errors are shown in one list (nice!) versus
    error by error. Is it worth it? Is eliminating duplicates doable without breaking the rest? If I do that, will I still
    need to put functions in order?
     Remember there is dependency in some functions like get_all_tags_in_order that ALL ANGLE BRACKETS ARE PRESENT, and no extra ones.
     So the function that checks for all angle brackets must pass before get_all_angle_brackets.
     Check if there are any other dependencies like this one!!

    - if I add <img ><img> to the xml file, the warning says The following opening tag names don't have a match:  ['<img>']
    Why only the second tag name??? Should list both opening tags. - NOT A HUGE ISSUE

    - NICE TO HAVE:
      Can I redesign Utility class initializer to only read file once (not for xml string and for line numbers separately)?
      For example making it give an option to return an xml string or file with line numbers (as boolean flag in arg list?)
      But - initializer is not suppose to return anything!!!!

    - NICE TO HAVE: Using print('Invalid character on line {}: {}' .format(linenu, content)) method in error messages in functions (instead of concatenation)

##############################################################

OK  - BUG: function paired_elements_are_closed_properly_and_names_match() doesn't correctly recognize
    multiple same tags: <bbb><bbb><bbb>

OK  BUG: function paired_elements_are_closed_properly_and_names_match recognizes tag <   mm> or <    l > as <>
    It says: The following opening tag names don't have a match: <>
    Seems like it depended on first checking there are no initial spaces in tags.
    I can either implement checking for initial spaces first or fix the "pair" function.
    SOLUTION: First execute function no_invalid_initial_characters_in_opening_tag,

OK, DONE - PUT IN Utiliy CLASS    HOW TO PASS getstring(), get_all_tags_in_order(), get_line_numbers(), get_clean_tags() as parameter or class object?
    These functions should not be spread all over the code. INstead they should be passed as parameter to functions. Or as a class object -
    but find out how and which method is better.
    IMPORTANT: IN utility functions getstring() is used in several other untility functions which are in turn called in
    main module checker1.py. That means there is parameter nesting. This is not good.
    Try remove utility functions to use each other. That possible?
    Or is there a way to use class/objects to get rid of this duplication/coupling?

OK    - BUG: No_orphan_brackets()
      doesn't pick up: << aaa/>>><, <>< aaa/>>

OK   - BUG: no_redundant_brackets():
        - It shows previous line number 1 for bracket on line 3. For example:
        1 <aaa>
        2
        3 ><bbb>
        4 <ccc>
        - doesn't pick up opening orphan bracket after the end of end root tag. It does pick up closing bracket.

OK? - BUG: doesn't recognize <> as invalid characters as data content (invalid chars are <, >, &).
    Neither orphan brackets function works - because <> is considered an empty tag (all three initial checks in
    run() function are satisfied: no_redundant_brackets, number of brackets is even, number of opening and closing brackets match).
    So what is the check then for an empty tag <> ? NOW FIXED IN LOWERCASE FUNCTION. CHECKS FO EMPTY TAG.
    AS SOON AS THERE A SINGLE TAG, ORPHAN FUNCTION PICKS IT UP.

OK    - BUG: in get_clean_tags(). Doesn't work for tags that have space after <.
    split = [tag.split() for tag in no_slash]   # problem: if I split when tag has initial space, it doesn't work.
    Gives '' for < from >

OK    - Can element names be the same? Let's say several book elements in a list of books? NOW FIXED - removed fuction to check for duplicate tags.
    DOESN'T ACCEPT DUPLICATE TAGS! It should! For example list of books:
    <books1>
        <book>
            title1
        </book>
        <book>
            title2
        </book>
    <books1>
OK    - Single element </wer/> is not picked up as an error. - NOW FIXED - func no_invalid_initial_characters_in_opening_tag() addresses it
OK    - check_that_element_names_contain_only_valid_characters() doesn't pick up extra '/' as invalid element: <abc//> or </a/bc>
        The reason is that get_clean_tags() removes all '/', even those that are not at the ends.
        Change get_clean_tags() so it picks up those '/' that are in between? (make sure that you don't break the rest of the code!! - this is where regression testing is helpful))

OK  - BUG: if tag has extra > at the end it throws error - FIXED - first two functions solve it
    File "/home/matjaz/PycharmProjects/xml_well_formedness_check/xml_well_formedness_check/utility_functions.py", line 119, in get_clean_tags
    first_part = [part[0] for part in split]
    IndexError: list index out of range
    for example <from>>


    - test well funciton no_redundant_brackets(), especially part: if brackets[i+1] == bracket (must not produce index out of range error)
    - check comments in all functions (including utilities) for bugs, problems
    - see what else is needed from the list (ignore attribs for now)
    - clean up docstrings
    - test

    FOR LATER:
    - DOES TAG HAVE A CORRECT ATTRIBUTE
    - CHECK THAT SINGLE ELEMENTS ARE CORRECTLY FORMED - WITH ATRIBUTE
    - CHECK THAT THERE IS NOTHING (no text) BEFORE OPENING ROOT TAG (except declarations, doctype, comments)


# ****************************************************************************************************
#   XML RULES
# ****************************************************************************************************

D    XML file must start with XML declaration.
        Example: <?xml version="1.0" encoding="UTF-8" standalone="no"?>
D   Must be only one root element and needs to have opening and closing tag.
D    Child elements (except XML declar. and !DOCTYPE (any others??)) need to be within the root element as its children.
D    Nested child elements need to be within their parents (elements must be properly nested).
D    Elements can have opening and closing tag AND can be single!
        <tag></tag>, <dd/>, <acb />, <child attribute="value" />
        (IMPORTANT - NOTE THIS LAST THREE SINGLE EMPTY TAGS - DON'T HAVE THEIR PAIRS!)
D    Single elements are empty and have forward slash before closing bracket.

D?    Element names must not contain spaces (<dateofbirth> is correct, <date of birth> is incorrect ).
D    Element names must not start with digits, diacritics, the full stop, the hyphen(minus) and 'xml' (any letter case).
D    Element names must start with letter (uppercase or lowercase), underscore, or colon.
D    Element names can contain colon, hyphen-minus, full stop (period), low line (underscore), and middle dot.
        Permitted: - W3schools xml validator doesn't allow to start with : or _  -strange!
            axiom
            _axiom_26
            :axiom_veintis√©is
            ora:open.source

            All of these names begin with a letter, an underscore, or a colon,
            followed by any combination of letters, digits, underscores, colons, and periods.
        Not permitted:

            #axiom
            @axiom
            26th_of_month
            axiom#26

            The first three begin with something other than a letter, underscore, or colon; the last starts out all right,
            but falls apart because the # is not a legitimate name character.

D    Must be no space between opening bracket and the name of an element.
D    Element names must be the same in opening and closing tag.
D    Elements must be closed properly: <child>Data</child>, <child attribute="value" />
D?   Tags are case sensitive.
D    Comments must be within comment tags <!-- -->.
D    Comments are not allowed to end with --->.
D    Matjaz: Comments (comment tags) must not be nested inside other comments.
D    Closing tags don't have attributes.



    Must allow multiple whitespace characters - define where!
    There may be whitespace between the end of the name or attribute in an opening element tag and the closing
    bracket of that element.
        Example: <body   > is allowed
    All data content must be within element tags (not inside tags). (how to chcek that???)

    Attributes must have both quotation marks around attribute's value.
    An attribute name must not appear more than once in the same start tag.
    Attribute values must not contain entity references to external entities.
    Single elements can contain attributes.
    '<' character is not allowed in attribute values. ('>' is allowed????)

    ----------------------------------
D?  SPECIAL CHARACTERS to escape in XML - should not appear in xml document content- must be escape with the following terms:
    CHECK IS THIS FOR NAMES OR DATA CONTENT?????
        "   &quot;
        '   &apos;
        <   &lt;
        >   &gt;
        &   &amp;

    (from w3.org) - for DATA CONTENT:
    The ampersand character (&) and the left angle bracket (<) MUST NOT appear in their literal form,
    except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
    If they are needed elsewhere, they MUST be escaped using either numeric character references or
    the strings " &amp; " and " &lt; " respectively. The right angle bracket (>) may be represented
    using the string " &gt; ", and MUST, for compatibility, be escaped using either " &gt; " or
    a character reference when it appears in the string " ]]> " in content, when that string
    is not marking the end of a CDATA section.

    ALSO SEE https://stackoverflow.com/questions/730133/invalid-characters-in-xml:
    The < MUST be escaped with a &lt; entity, since it is assumed to be the beginning of a tag.
    The & MUST be escaped with a &amp; entity, since it is assumed to be the beginning a entity reference
    The > should be escaped with &gt; entity. It is not mandatory -- it depends on the context -- but it is strongly advised to escape it.
    The ' should be escaped with a &apos; entity -- mandatory in attributes defined within single quotes but it is strongly advised to always escape it.
    The " should be escaped with a &quot; entity -- mandatory in attributes defined within double quotes but it is strongly advised to always escape it.
    ---------------------------------

    Data content must be within root element. Must not be outside of root element.
D    Data content must be in between any two > and < brackets.
        (Data content can be nested. It can appear like this:
            <tagA>
            aaa
                <tagB>bbb</tagB>
            </tagA>)

    MISC (for later):
    Doctype (DTD) declaration: <!DOCTYPE greeting SYSTEM "hello.dtd">
        Recommended doctype declarations: http://www.w3.org/QA/2002/04/valid-dtd-list.html
        Example why DTD is important:
            If you have created your own XML elements, attributes, and/or entities, then you should create a DTD.
            A DTD consists of a list of syntax definitions for each element in your XML document.
            When you create a DTD, you are creating the syntax rules for any XML document that uses the DTD.
            You are specifying which element names can be included in the document, the attributes that each
            element can have, whether or not these are required or optional, and more.
    Ensure CDATA applies (data is not parsed).
    CDATA sections may occur anywhere character data may occur (in between tags).

    Processing instructions (PI) should not start with 'xml'
    Referencing CSS example: <?xml-stylesheet type="text/css" href="tutorials.css"?>. Check that instead of href,
    a path to file can be used too
    Referencing scripts example: <script type="text/javascript">
    Referencing images
    Referencing links
    Referencing Schemas (XSD)


# ****************************************************************************************************
#   TESTING COMMENT TAGS AND COMMENTS
# ****************************************************************************************************

    Check that comment tags are formed correctly.
    Opening and closing bracket must be there, including the exclamation m. and all the dashes.

    TAKE INTO ACCOUNT:
    - what if one bracket is missing (add condition number_of_tags_must_be_even? - maybe two brackets are missing!)
    what if one of the dashes is missing, for example <!-   -->
    what if two, three of the dashes are missing
    what if one or two or three extra dashes are added
    what if exclamation mark is missing
    note that comments can encapsulate several lines with xml code in between
    note that if item has <!-- then the first closing bracket > should have --> doesn't apply
    because comments can have < > inside them

    Follow the rule that comments can have start and close tag just about anywhere in the xml
    as long as start and end tag complement each other and have proper syntax <!-- and -->.
    So only check that they are a pair and that proper syntax.
    Prevent this:
    <!--
    <!-- more xml -->
    -->

    # chack that all opening tags have format <!--
    # check that all closing tags have format -->
    # check that closing format ---> is not present
    # check that comment element is not nested within another comment element

    # check that for each opening there is a closing tag (even number of both - is that enough?)
    # every opening tag must be immediatelly followed by a closing tag -
    # that may prevent nesting - preceeding point!

    # check that and < and > inside comments don't intefere with opening and closing comment tags
